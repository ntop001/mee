package mee

import (
	"fmt"
	"testing"
)

func Test_AbiEncode(t *testing.T) {

}

func Test_AbiDecodeInt256(t *testing.T) {
	data := "0x00000000000000000000000000000000000058daae9fced885082f685d6a8f410000000000000000000000000000000000000000000000000000000000030fcd00000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000000000002d300000000000000000000000000000000000000000000000000000000000002d300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
	args := []*Arg{ Int256, Int256, Int256, Int256, Int256 }

	//unpack
	// 1. 1802177828137172433825747910168385
	// 2. 200653
	// 3. 240
	// 4. 723
	// 5. 723
	results := AbiDecode(data, args)
	fmt.Println("get results:", len(results))
	for i, v := range results {
		fmt.Println(i, v)
	}
}

func Test_TmplDecode(t *testing.T) {
	data := "0x00000000000000000000000000000000000058daae9fced885082f685d6a8f410000000000000000000000000000000000000000000000000000000000030fcd00000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000000000002d300000000000000000000000000000000000000000000000000000000000002d300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
	tmpl := "(int256, int256, int256, int256, int256)"

	// decode
	results := TmplDecode(data, tmpl)
	fmt.Println("get results:", len(results))
	for i, v := range results {
		fmt.Println(i, v)
	}
}

// eg: https://docs.soliditylang.org/en/latest/abi-spec.html#examples
// sig: function bar(bytes3[2] memory) public pure {}
func Test_Decode0(t *testing.T) {
	data := "0x61626300000000000000000000000000000000000000000000000000000000006465660000000000000000000000000000000000000000000000000000000000"
	tmpl := `(bytes32,bytes32)`

	// decode, abc, def
	results := TmplDecode(data, tmpl)
	fmt.Println("get byte32:", string(results[0].([]byte)))
	fmt.Println("get byte32:", string(results[1].([]byte)))
}

// eg: https://docs.soliditylang.org/en/latest/abi-spec.html#examples
// sig: function baz(uint32 x, bool y) public pure returns (bool r) { r = x > 32 || y; }
func Test_Decode1(t *testing.T) {
	data := "0x00000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001"
	tmpl := `(uint256,bool)`

	// decode, 69, true
	results := TmplDecode(data, tmpl)
	fmt.Println("get uint256:", results[0])
	fmt.Println("get bool:", results[1])
}

// eg: https://docs.soliditylang.org/en/latest/abi-spec.html#examples
// sig: function sam(bytes memory, bool, uint[] memory) public pure {}
func Test_Decode2(t *testing.T) {
	data := "0x0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000464617665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003"
	tmpl := `(bytes,bool,[]uint256)`

	// decode, dave, true, [1,2,3]
	results := TmplDecode(data, tmpl)
	fmt.Println("get bytes:", string(results[0].([]byte)))
	fmt.Println("get bool:", results[1])
	fmt.Println("get array:", results[2])
}

// eg: https://docs.soliditylang.org/en/latest/abi-spec.html#use-of-dynamic-types
// sig: (uint256,uint32[],bytes10,bytes)
func Test_Decode3(t *testing.T) {
	data := "00000000000000000000000000000000000000000000000000000000000001230000000000000000000000000000000000000000000000000000000000000080313233343536373839300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004560000000000000000000000000000000000000000000000000000000000000789000000000000000000000000000000000000000000000000000000000000000d48656c6c6f2c20776f726c642100000000000000000000000000000000000000"
	tmpl := `(uint256,[]uint256,bytes32,bytes)`

	// decode, (0x123, [0x456, 0x789], "1234567890", "Hello, world!")
	results := TmplDecode(data, tmpl)
	fmt.Println("get uint256:", results[0])
	fmt.Println("get []uint256:", results[1])
	fmt.Println("get bytes32:", string(results[2].([]byte)))
	fmt.Println("get bytes:", string(results[3].([]byte)))
}

func Test_Decode4(t *testing.T) {
	data := "0x
	tmpl := "(uint256,[](uint256,bool),uint256)"

	// decode: (1, [(3, false), (4, true)], 3)
	results := TmplDecode(data, tmpl)
	fmt.Println("get results0:", results[0])
	fmt.Println("get results0:", results[1])
	fmt.Println("get results0:", results[2])
}

// eg: https://etherscan.io/tx/0x3d2d2d92cab3e02f609d2afc7b50997ca797d316eb30d7a15ce2d56f53afc48a
func Test_Decode5(t *testing.T) {
	data := "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011acbc73c1f000000000000000000000000000040d0f1c7979cd5e91f52a0fe00a1c61b466baa1500000000000000000000000000000000000000000000000000000000000000000000000000000000000000007011ee079f579eb313012bddb92fd6f06fa433350000000000000000000000000000000000000000000000000000000000000992000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067e0d38100000000000000000000000000000000000000000000000000000000682fed8100000000000000000000000000000000000000000000000000000000000000003d958fe20000000000000000000000000000000000000000b5bdf64df711d5f80000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000016bcc41e900000000000000000000000000000000a26b00c1f0df003000390027140000faa71900000000000000000000000000000000000000000000000000000000000000838462dba9ad48268605e232c99b20509166ef6a5ddcfe6c7baedf66031dc93fff43e1b5cf5f70e805d2643f71bb3899d8569fbeff9647b077ab9f9566b5b6022300000206bfdd4fee487c47799fd9aa57225e03268298d2983ff74cbab178665fab33ea4337a056b5ae6ab3fe7903ddb4a0a578ce9722e145ecb9e4a6e1a78df23eca7d00000000000000000000000000000000000000000000000000000000003d958fe2"
	tmpl := "((" +
	"address,"+ //considerationToken; // 0x24
	"uint256,"+ //considerationIdentifier; // 0x44
	"uint256,"+ //considerationAmount; // 0x64
	"address,"+ //payable offerer; // 0x84
	"address,"+ //zone; // 0xa4
	"address,"+ //offerToken; // 0xc4
	"uint256,"+ //offerIdentifier; // 0xe4
	"uint256,"+ //offerAmount; // 0x104
	"uint256,"+ //basicOrderType; // 0x124
	"uint256,"+ //startTime; // 0x144
	"uint256,"+ //endTime; // 0x164
	"bytes32,"+ //zoneHash; // 0x184
	"uint256,"+ //salt; // 0x1a4
	"bytes32,"+ //offererConduitKey; // 0x1c4
	"bytes32,"+ //fulfillerConduitKey; // 0x1e4
	"uint256,"+ //totalOriginalAdditionalRecipients; // 0x204
	"[](uint256,address),"+ //additionalRecipients; // 0x224
	"bytes))" //signature; // 0x244

	// decode: (BasicOrderParameters)
	results := TmplDecode(data, tmpl)
	fields := results[0].([]interface{})
	for i, v := range fields {
		if i == 11 || i == 13 || i == 14 || i == 17 {
			fmt.Println("get field:", i, BytesToHex(v.([]byte)))
		} else {
			fmt.Println("get field:", i, v)
		}
	}
}

func Test_isDynamic(t *testing.T) {
	fmt.Println(isDynamic( &Arg{Type: "tuple", Meta: ParseTmpl(`(uint256,bool)`) }))
	fmt.Println(isDynamic( &Arg{Type: "tuple", Meta: ParseTmpl(`(uint256,string)`) }))
	fmt.Println(isDynamic( &Arg{Type: "tuple", Meta: ParseTmpl(`(uint256,)`) }))
}