package mee

import (
	"fmt"
	"math/big"
	"testing"
)

func Test_AbiEncodeType(t *testing.T) {
	data := []interface{}{
		big.NewInt(1),
		int64(2),
		true,
		"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
		"sample",
	}

	// encode:
	//0000000000000000000000000000000000000000000000000000000000000001
	//0000000000000000000000000000000000000000000000000000000000000002
	//0000000000000000000000000000000000000000000000000000000000000001
	//000000000000000000000000d8dA6BF26964aF9D7eEd9e03E53415D37aA96045
	//73616d706c650000000000000000000000000000000000000000000000000000
	hex := TmplEncode(data, "(int256,int64,bool,address,bytes32)")
	HexPrettyPrint(hex)
}

func Test_AbiEncodeString(t *testing.T) {
	data := []interface{} {
		[]interface{}{ "hello", "world" },
	}

	//encode:
	//0000000000000000000000000000000000000000000000000000000000000020
	//0000000000000000000000000000000000000000000000000000000000000002
	//0000000000000000000000000000000000000000000000000000000000000040
	//0000000000000000000000000000000000000000000000000000000000000080
	//0000000000000000000000000000000000000000000000000000000000000005
	//68656c6c6f000000000000000000000000000000000000000000000000000000
	//0000000000000000000000000000000000000000000000000000000000000005
	//776f726c64000000000000000000000000000000000000000000000000000000
	hex := TmplEncode(data, "([]string)")
	HexPrettyPrint(hex)
}

// eg: https://docs.soliditylang.org/en/latest/abi-spec.html#examples
func Test_AbiEncode0(t *testing.T)  {
	data := []interface{} {
		"abc", "def",
	}

	//encode:
	//6162630000000000000000000000000000000000000000000000000000000000
	//6465660000000000000000000000000000000000000000000000000000000000
	hex := TmplEncode(data, "(bytes32,bytes32)")
	HexPrettyPrint(hex)
}

// eg: https://docs.soliditylang.org/en/latest/abi-spec.html#examples
func Test_AbiEncode1(t *testing.T)  {
	data := []interface{} {
		int64(69), true,
	}

	//encode:
	//0000000000000000000000000000000000000000000000000000000000000045
	//0000000000000000000000000000000000000000000000000000000000000001
	hex := TmplEncode(data, "(int64,bool)")
	HexPrettyPrint(hex)
}

// eg: https://docs.soliditylang.org/en/latest/abi-spec.html#examples
func Test_AbiEncode2(t *testing.T)  {
	data := []interface{} {
		"dave", true, []interface{}{ big.NewInt(1), big.NewInt(2), big.NewInt(3) },
	}

	//encode:
	//0000000000000000000000000000000000000000000000000000000000000060
	//0000000000000000000000000000000000000000000000000000000000000001
	//00000000000000000000000000000000000000000000000000000000000000a0
	//0000000000000000000000000000000000000000000000000000000000000004
	//6461766500000000000000000000000000000000000000000000000000000000
	//0000000000000000000000000000000000000000000000000000000000000003
	//0000000000000000000000000000000000000000000000000000000000000001
	//0000000000000000000000000000000000000000000000000000000000000002
	//0000000000000000000000000000000000000000000000000000000000000003
	hex := TmplEncode(data, "(bytes,bool,[]uint256)")
	HexPrettyPrint(hex)
}

// eg: https://docs.soliditylang.org/en/latest/abi-spec.html#use-of-dynamic-types
func Test_AbiEncode3(t *testing.T)  {
	data := []interface{} {
		big.NewInt(0x123), []interface{}{ int64(0x456), int64(0x789)}, "1234567890", "Hello, world!",
	}

	//encode:
	//0000000000000000000000000000000000000000000000000000000000000123
	//0000000000000000000000000000000000000000000000000000000000000080
	//3132333435363738393000000000000000000000000000000000000000000000
	//00000000000000000000000000000000000000000000000000000000000000e0
	//0000000000000000000000000000000000000000000000000000000000000002
	//0000000000000000000000000000000000000000000000000000000000000456
	//0000000000000000000000000000000000000000000000000000000000000789
	//000000000000000000000000000000000000000000000000000000000000000d
	//48656c6c6f2c20776f726c642100000000000000000000000000000000000000
	hex := TmplEncode(data, "(uint256,[]uint64,bytes32,bytes)")
	HexPrettyPrint(hex)
}

// eg: https://docs.soliditylang.org/en/latest/abi-spec.html#use-of-dynamic-types
func Test_AbiEncode4(t *testing.T)  {
	data := []interface{}{
		[]interface{}{
			[]interface{}{ big.NewInt(1), big.NewInt(2) },
			[]interface{}{ big.NewInt(3) },
		},
		[]interface{}{
			"one", "two", "three",
		},
	}

	a := ParseTmpl("([][]uint256,[]string)")
	fmt.Println("get arg:", a)

	//encode:
	// - 0000000000000000000000000000000000000000000000000000000000000040 - offset of [[1, 2], [3]]
	// - 0000000000000000000000000000000000000000000000000000000000000140 - offset of ["one", "two", "three"]
	// - 0000000000000000000000000000000000000000000000000000000000000002 - count for [[1, 2], [3]]
	// - 0000000000000000000000000000000000000000000000000000000000000040 - offset of [1, 2]
	// - 00000000000000000000000000000000000000000000000000000000000000a0 - offset of [3]
	// - 0000000000000000000000000000000000000000000000000000000000000002 - count for [1, 2]
	// - 0000000000000000000000000000000000000000000000000000000000000001 - encoding of 1
	// - 0000000000000000000000000000000000000000000000000000000000000002 - encoding of 2
	// - 0000000000000000000000000000000000000000000000000000000000000001 - count for [3]
	// - 0000000000000000000000000000000000000000000000000000000000000003 - encoding of 3
	// - 0000000000000000000000000000000000000000000000000000000000000003 - count for ["one", "two", "three"]
	// - 0000000000000000000000000000000000000000000000000000000000000060 - offset for "one"
	// - 00000000000000000000000000000000000000000000000000000000000000a0 - offset for "two"
	// - 00000000000000000000000000000000000000000000000000000000000000e0 - offset for "three"
	// - 0000000000000000000000000000000000000000000000000000000000000003 - count for "one"
	// - 6f6e650000000000000000000000000000000000000000000000000000000000 - encoding of "one"
	// - 0000000000000000000000000000000000000000000000000000000000000003 - count for "two"
	// - 74776f0000000000000000000000000000000000000000000000000000000000 - encoding of "two"
	// - 0000000000000000000000000000000000000000000000000000000000000005 - count for "three"
	// - 7468726565000000000000000000000000000000000000000000000000000000 - encoding of "three"

	hex := TmplEncode(data, "([][]uint256,[]string)")
	HexPrettyPrint(hex)
}